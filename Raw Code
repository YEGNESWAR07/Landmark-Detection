import numpy as np
import pandas as pd
import cv2
import matplotlib.pyplot as plt
import os
import random
from PIL import Image
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, Flatten
from keras.utils import to_categorical

# Load the CSV file into a DataFrame
df = pd.read_csv('train.csv')
samples = 20000
df = df.loc[:samples, :]

# Preprocessing and data preparation
num_classes = len(df['landmark_id'].unique())
num_data = len(df)
data = df['landmark_id'].value_counts().reset_index()
data.columns = ['landmark_id', 'count']

# Plotting the distribution of landmark IDs
plt.hist(data['count'], bins=50)
plt.xlabel('Number of Occurrences')
plt.ylabel('Landmark ID Count')
plt.title('Distribution of Landmark IDs')
plt.show()

# Splitting the data into training and testing sets
train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)

# Loading and processing images
image_size = (128, 128)

def load_image(row):
    img_path = os.path.join('images', row['id'] + '.jpg')
    img = Image.open(img_path)
    img = img.resize(image_size)
    img = np.array(img)
    return img

train_images = train_df.apply(load_image, axis=1).values
train_labels = train_df['landmark_id'].values

# Normalizing image data
train_images = train_images / 255.0

# Convert labels to categorical format
train_labels = to_categorical(train_labels, num_classes=num_classes)

# Create a simple sequential model
model = Sequential()
model.add(Flatten(input_shape=train_images.shape[1:]))
model.add(Dense(128, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels, epochs=10, batch_size=32, validation_split=0.2)

# Evaluating the model on the test set
test_images = test_df.apply(load_image, axis=1).values
test_labels = test_df['landmark_id'].values

# Normalizing test image data
test_images = test_images / 255.0

# Convert test labels to categorical format
test_labels = to_categorical(test_labels, num_classes=num_classes)

# Evaluate the model on the test set
loss, accuracy = model.evaluate(test_images, test_labels)
print('Test Loss:', loss)
print('Test Accuracy:', accuracy)

